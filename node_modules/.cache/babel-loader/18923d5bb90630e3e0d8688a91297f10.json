{"ast":null,"code":"var _jsxFileName = \"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/App.js\";\n// Challenge: Mad Libs\n// As a developer, I have been tasked with recreating the children's game Mad Libs as an app. Mad Libs requires the user to supply a series of random words that match the part of speech as indicated. When all the words have been supplied, the user can see their words added to a pre-written story. Hilarity ensues.\n// Mad Libs\n// As a user, I can see a page with many text inputs.\n// As a user, I can see labels next to the text inputs indicating what part of speech (or type of word) should be entered into each text form: nouns, pronouns, verbs, adjectives, and adjectives.\n// As a user, I can fill out the inputs.\n// As a user, after I have filled out the text inputs I can click a 'Submit' button.\n// As a user, when I click 'Submit' I see a paragraph appear on the page that contains the words I entered in the text forms to create a funny story.\nimport './App.css';\nimport React, { Component } from 'react';\nimport Form from './components/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFormSubmit = formData => {\n      this.setState({\n        form: formData\n      });\n    };\n\n    this.state = {\n      form: {\n        noun1: \"_____\",\n        noun2: \"_____\",\n        noun3: \"_____\",\n        noun4: \"_____\",\n        verb1: \"_____\",\n        verb2: \"_____\",\n        adjective1: \"_____\",\n        adjective2: \"_____\"\n      }\n    };\n  }\n\n  render() {\n    {\n      this.noun1 = this.state.form.noun1;\n    }\n    {\n      this.noun2 = this.state.form.noun2;\n    }\n    {\n      this.noun3 = this.state.form.noun3;\n    }\n    {\n      this.noun4 = this.state.form.noun4;\n    }\n    {\n      this.verb1 = this.state.form.verb1;\n    }\n    {\n      this.verb2 = this.state.form.verb2;\n    }\n    {\n      this.adjective1 = this.state.form.adjective1;\n    }\n    {\n      this.adjective2 = this.state.form.adjective2;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        handleFormSubmit: this.handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), this.state.form && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" A \", this.noun1, \" \", this.verb1, \" around the \", this.adjective1, \" \", this.noun2, \" and \", this.verb2, \"  up the street and gossiped with Mrs. Bilbo about \", this.adjective2, \" \", this.noun3, \"'s \", this.noun4, \". \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: window.location.reload(),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","Form","App","constructor","props","handleFormSubmit","formData","setState","form","state","noun1","noun2","noun3","noun4","verb1","verb2","adjective1","adjective2","render","window","location","reload"],"sources":["/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/App.js"],"sourcesContent":["// Challenge: Mad Libs\n// As a developer, I have been tasked with recreating the children's game Mad Libs as an app. Mad Libs requires the user to supply a series of random words that match the part of speech as indicated. When all the words have been supplied, the user can see their words added to a pre-written story. Hilarity ensues.\n\n// Mad Libs\n\n// As a user, I can see a page with many text inputs.\n// As a user, I can see labels next to the text inputs indicating what part of speech (or type of word) should be entered into each text form: nouns, pronouns, verbs, adjectives, and adjectives.\n// As a user, I can fill out the inputs.\n// As a user, after I have filled out the text inputs I can click a 'Submit' button.\n// As a user, when I click 'Submit' I see a paragraph appear on the page that contains the words I entered in the text forms to create a funny story.\n\nimport './App.css';\nimport React, { Component } from 'react'\nimport Form from './components/Form'\nclass App extends Component {\n  constructor(props) {\n    super(props) \n    this.state = {\n      form: {\n        noun1: \"_____\",\n        noun2: \"_____\",\n        noun3: \"_____\",\n        noun4: \"_____\",\n        verb1: \"_____\",\n        verb2: \"_____\",\n        adjective1: \"_____\",\n        adjective2: \"_____\"\n      }\n    }\n  }\n\n\n  handleFormSubmit = (formData) => {\n    this.setState({ form: formData });\n  };\n\n  render(){\n    {this.noun1 = this.state.form.noun1}\n    {this.noun2 = this.state.form.noun2}\n    {this.noun3 = this.state.form.noun3}\n    {this.noun4 = this.state.form.noun4}\n\n    {this.verb1 = this.state.form.verb1}\n    {this.verb2 = this.state.form.verb2}\n\n    {this.adjective1 = this.state.form.adjective1}\n    {this.adjective2 = this.state.form.adjective2}\n\n    return(\n      <div>\n        \n        <Form handleFormSubmit={ this.handleFormSubmit } />\n            { this.state.form &&\n              <div>\n                <p> A {this.noun1} {this.verb1} around the {this.adjective1} {this.noun2} and {this.verb2}  up the street and gossiped with Mrs. Bilbo about {this.adjective2} {this.noun3}'s {this.noun4}. </p>\n              </div>\n            }\n            <button onClick={ window.location.reload()}>Clear</button>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;EAC1BG,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAiBnBC,gBAjBmB,GAiBCC,QAAD,IAAc;MAC/B,KAAKC,QAAL,CAAc;QAAEC,IAAI,EAAEF;MAAR,CAAd;IACD,CAnBkB;;IAEjB,KAAKG,KAAL,GAAa;MACXD,IAAI,EAAE;QACJE,KAAK,EAAE,OADH;QAEJC,KAAK,EAAE,OAFH;QAGJC,KAAK,EAAE,OAHH;QAIJC,KAAK,EAAE,OAJH;QAKJC,KAAK,EAAE,OALH;QAMJC,KAAK,EAAE,OANH;QAOJC,UAAU,EAAE,OAPR;QAQJC,UAAU,EAAE;MARR;IADK,CAAb;EAYD;;EAODC,MAAM,GAAE;IACN;MAAC,KAAKR,KAAL,GAAa,KAAKD,KAAL,CAAWD,IAAX,CAAgBE,KAA7B;IAAmC;IACpC;MAAC,KAAKC,KAAL,GAAa,KAAKF,KAAL,CAAWD,IAAX,CAAgBG,KAA7B;IAAmC;IACpC;MAAC,KAAKC,KAAL,GAAa,KAAKH,KAAL,CAAWD,IAAX,CAAgBI,KAA7B;IAAmC;IACpC;MAAC,KAAKC,KAAL,GAAa,KAAKJ,KAAL,CAAWD,IAAX,CAAgBK,KAA7B;IAAmC;IAEpC;MAAC,KAAKC,KAAL,GAAa,KAAKL,KAAL,CAAWD,IAAX,CAAgBM,KAA7B;IAAmC;IACpC;MAAC,KAAKC,KAAL,GAAa,KAAKN,KAAL,CAAWD,IAAX,CAAgBO,KAA7B;IAAmC;IAEpC;MAAC,KAAKC,UAAL,GAAkB,KAAKP,KAAL,CAAWD,IAAX,CAAgBQ,UAAlC;IAA6C;IAC9C;MAAC,KAAKC,UAAL,GAAkB,KAAKR,KAAL,CAAWD,IAAX,CAAgBS,UAAlC;IAA6C;IAE9C,oBACE;MAAA,wBAEE,QAAC,IAAD;QAAM,gBAAgB,EAAG,KAAKZ;MAA9B;QAAA;QAAA;QAAA;MAAA,QAFF,EAGQ,KAAKI,KAAL,CAAWD,IAAX,iBACA;QAAA,uBACE;UAAA,kBAAO,KAAKE,KAAZ,OAAoB,KAAKI,KAAzB,kBAA4C,KAAKE,UAAjD,OAA8D,KAAKL,KAAnE,WAA+E,KAAKI,KAApF,yDAA8I,KAAKE,UAAnJ,OAAgK,KAAKL,KAArK,SAA+K,KAAKC,KAApL;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAJR,eAQM;QAAQ,OAAO,EAAGM,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAlB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QARN;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAYD;;AA9CyB;;AAiD5B,eAAenB,GAAf"},"metadata":{},"sourceType":"module"}