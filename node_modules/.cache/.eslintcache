[{"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/index.js":"1","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/App.js":"2","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/reportWebVitals.js":"3","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/components/Form.js":"4"},{"size":535,"mtime":1652539710345,"results":"5","hashOfConfig":"6"},{"size":2704,"mtime":1653668789133,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1652539710345,"results":"8","hashOfConfig":"6"},{"size":5479,"mtime":1653668759962,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f2x891",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/index.js",[],[],"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/App.js",["24","25","26","27","28","29","30","31"],[],"// Challenge: Mad Libs\n// As a developer, I have been tasked with recreating the children's game Mad Libs as an app. Mad Libs requires the user to supply a series of random words that match the part of speech as indicated. When all the words have been supplied, the user can see their words added to a pre-written story. Hilarity ensues.\n\n// Mad Libs\n\n// As a user, I can see a page with many text inputs.\n// As a user, I can see labels next to the text inputs indicating what part of speech (or type of word) should be entered into each text form: nouns, pronouns, verbs, adjectives, and adjectives.\n// As a user, I can fill out the inputs.\n// As a user, after I have filled out the text inputs I can click a 'Submit' button.\n// As a user, when I click 'Submit' I see a paragraph appear on the page that contains the words I entered in the text forms to create a funny story.\n\nimport './App.css';\nimport React, { Component } from 'react'\nimport Form from './components/Form'\nclass App extends Component {\n  constructor(props) {\n    super(props) \n    this.state = {\n      form: {\n        noun1: \"_____\",\n        noun2: \"_____\",\n        noun3: \"_____\",\n        noun4: \"_____\",\n        verb1: \"_____\",\n        verb2: \"_____\",\n        adjective1: \"_____\",\n        adjective2: \"_____\"\n      }\n    }\n  }\n\n  handleFormSubmit = (formData) => {\n    this.setState({ form: formData });\n  };\n\n  render(){\n    {this.noun1 = this.state.form.noun1}\n    {this.noun2 = this.state.form.noun2}\n    {this.noun3 = this.state.form.noun3}\n    {this.noun4 = this.state.form.noun4}\n\n    {this.verb1 = this.state.form.verb1}\n    {this.verb2 = this.state.form.verb2}\n\n    {this.adjective1 = this.state.form.adjective1}\n    {this.adjective2 = this.state.form.adjective2}\n\n    return(\n      <div className=\"container\">\n        <div className=\"title\">\n          <h1>Mad Libs</h1>\n          <div className=\"center\">\n            <div className=\"left\">\n              <Form handleFormSubmit={ this.handleFormSubmit } />\n            </div>\n              { this.state.form &&\n                <div className=\"right\">\n                  <div className=\"text\">\n                    <p> \n                      A {this.noun1} {this.verb1} around the {this.adjective1} {this.noun2} and {this.verb2}  up the street and gossiped with Mrs. Bilbo about {this.adjective2} {this.noun3}'s {this.noun4}. \n                    </p>\n                  </div>\n                  <div className=\"App\">\n                    <button className=\"shadow butt\" onClick={() => window.location.reload()}>Clear</button>\n                  </div>\n                </div>\n                }\n              </div>\n            </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/reportWebVitals.js",[],[],"/Users/jeremyduncan/repos/LearnAcademy/javascript-practice/react-challenges/forms-jeremy/src/components/Form.js",[],[],[],{"ruleId":"32","severity":1,"message":"33","line":37,"column":5,"nodeType":"34","messageId":"35","endLine":37,"endColumn":41},{"ruleId":"32","severity":1,"message":"33","line":38,"column":5,"nodeType":"34","messageId":"35","endLine":38,"endColumn":41},{"ruleId":"32","severity":1,"message":"33","line":39,"column":5,"nodeType":"34","messageId":"35","endLine":39,"endColumn":41},{"ruleId":"32","severity":1,"message":"33","line":40,"column":5,"nodeType":"34","messageId":"35","endLine":40,"endColumn":41},{"ruleId":"32","severity":1,"message":"33","line":42,"column":5,"nodeType":"34","messageId":"35","endLine":42,"endColumn":41},{"ruleId":"32","severity":1,"message":"33","line":43,"column":5,"nodeType":"34","messageId":"35","endLine":43,"endColumn":41},{"ruleId":"32","severity":1,"message":"33","line":45,"column":5,"nodeType":"34","messageId":"35","endLine":45,"endColumn":51},{"ruleId":"32","severity":1,"message":"33","line":46,"column":5,"nodeType":"34","messageId":"35","endLine":46,"endColumn":51},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]